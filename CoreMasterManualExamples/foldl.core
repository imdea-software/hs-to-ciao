[foldl' [Occ=LoopBreaker]
  :: (Int -> Int -> Int) -> Int -> [Int] -> Int
[LclIdX]
foldl'
  = \ (f :: Int -> Int -> Int) (base :: Int) (ds_d11T :: [Int]) ->
      case ds_d11T of {
        [] -> base;
        : x xs -> foldl' f (f base x) xs
      };,$trModule :: Module
[LclIdX]
$trModule = Module (TrNameS "main"#) (TrNameS "Foldl"#)]